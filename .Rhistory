library(tidyverse)
library(shiny)
9+9
library(knitr)
library(data.table)
library(Rcpp)
install.packages("shinyjs")
install.packages("shinycss")
shiny::runApp('passaic_nitrate_app')
runApp('passaic_nitrate_app')
discharge_data
source("~/passaic_nitrate_app/R/01_load_packages_and_data.R", echo=TRUE)
setwd("~/passaic_nitrate_app")
source("~/passaic_nitrate_app/R/01_load_packages_and_data.R", echo=TRUE)
discharge_data
table(discharge_data$Date)
table(year(discharge_data$Date))
table(year(discharge_data %>% filter(Parameter == "Nitrogen, Nitrate Total (as N)") %>% pull(Date)))
runApp()
discharge_data
sort(unique(discharge_data$Year))
?any_vars
discharge_data %>% names
discharge_data %>%
filter(Parameter == "Nitrogen, Nitrate Total (as N)") %>%
filter_at('Month', any_vars(. %in% as.numeric(1:12))) %>%
group_by_("Location", 'Month') %>%
summarise(Quantity.Avg = mean(Quantity.Avg, na.rm = TRUE)) %>%
filter(!is.nan(Quantity.Avg)) %>%
arrange(desc(Location)) %>%
left_join(discharge_sections)
discharge_Data
discharge_data
discharge_data %>% as_tibble()
read_discharge_comparison_box_plot_data <- function(by = c("Year", "Month"), range = 2000:2018) {
by <- rlang::arg_match(by)
if(by == 'Year') {
discharge_data %>%
filter(Parameter == "Nitrogen, Nitrate Total (as N)", Year %in% range) %>%
group_by(Location, Year) %>%
summarise(Quantity.Avg = mean(Quantity.Avg, na.rm = TRUE)) %>%
filter(!is.nan(Quantity.Avg)) %>%
left_join(discharge_sections)
} else { #by = 'Month'
discharge_data %>%
filter(Parameter == "Nitrogen, Nitrate Total (as N)", Month %in% range) %>%
group_by(Location, Month) %>%
summarise(Quantity.Avg = mean(Quantity.Avg, na.rm = TRUE)) %>%
filter(!is.nan(Quantity.Avg)) %>%
left_join(discharge_sections)
}
}
read_discharge_comparison_box_plot_data()
read_discharge_comparison_box_plot_data('Month', 1:12)
discharge_sections
read_discharge_comparison_box_plot_data('Month', 1:12)
read_discharge_comparison_box_plot_data()
runApp()
read_discharge_comparison_box_plot_data(range = 2000)
discharge_data %>%
filter(Parameter == "Nitrogen, Nitrate Total (as N)", Year %in% range)
discharge_data %>%
filter(Parameter == "Nitrogen, Nitrate Total (as N)") %>% pull(Year) %>% table
discharge_data %>%
filter(Parameter == "Nitrogen, Nitrate Total (as N)", Year == 2000)
View(discharge_data %>%
filter(Parameter == "Nitrogen, Nitrate Total (as N)", Year == 2000))
View(discharge_data %>%
filter(Parameter == "Nitrogen, Nitrate Total (as N)",
!is.na(Quantity.Avg)) %>% summarise(min(Year)))
runApp()
read_discharge_comparison_box_plot_data('Month', 1)
runApp()
read_discharge_comparison_box_plot_data2 <- function(by = c("Year", "Month"), range = 2002:2018) {
by <- rlang::arg_match(by)
if(all(2002:2018 %in% range) || all(1:12 %in% range)) {
discharge_data %>%
filter(Parameter == "Nitrogen, Nitrate Total (as N)") %>%
group_by_("Location", by) %>%
summarise(Quantity.Avg = mean(Quantity.Avg, na.rm = TRUE)) %>%
filter(!is.nan(Quantity.Avg)) %>%
left_join(discharge_sections)
} else {
if (by == "Year") {
discharge_data %>%
filter(Parameter == "Nitrogen, Nitrate Total (as N)") %>%
filter_at(by, any_vars(. %in% as.numeric(range))) %>%
group_by_("Location", by) %>%
summarise(Quantity.Avg = mean(Quantity.Avg, na.rm = TRUE)) %>%
filter(!is.nan(Quantity.Avg)) %>%
arrange(desc(Location)) %>%
left_join(discharge_sections)
} else {
discharge_data %>%
filter(Parameter == "Nitrogen, Nitrate Total (as N)") %>%
filter_at(by, any_vars(. %in% as.numeric(range))) %>%
group_by_("Location", "Month", "Year") %>%
summarise(Quantity.Avg = mean(Quantity.Avg, na.rm = TRUE)) %>%
filter(!is.nan(Quantity.Avg)) %>%
arrange(desc(Location)) %>%
left_join(discharge_sections)
}
}
}
read_discharge_comparison_box_plot_data2()
read_discharge_comparison_box_plot_data2(by = 'Month', 1)
read_discharge_comparison_box_plot_data2(by = 'Month', 1:12)
nrow(read_discharge_comparison_box_plot_data2(by = 'Month', 1:12))
nrow(read_discharge_comparison_box_plot_data2())
runApp()
runApp()
shiny::runApp()
runApp()
map_isco_sampling <- function() {
leaflet() %>%
addProviderTiles(group = "ESRI (default)", providers$Esri) %>%
addProviderTiles(group = "ESRI NatGeoWorldMap", providers$Esri.NatGeoWorldMap) %>%
addProviderTiles(group = "ESRI WorldImagery", providers$Esri.WorldImagery) %>%
addProviderTiles(group = "OpenStreetMap", providers$OpenStreetMap) %>%
# addMarkers(
#   group = "Dischargers (not sampled)", lng = discharge_map@coords[, 1], lat = discharge_map@coords[, 2], popup = discharge_map@data$FAC_LABEL, label = discharge_map@data$FAC_LABEL,
#   layerId = discharge_map@data$FAC_LABEL,
#   icon = leaflet_icons["square"]
# ) %>% # label = discharge_map@data$FAC_LABEL
addMarkers(group = "Intakes", icon = leaflet_icons["star"], lng = c(-74.23467, -74.27120), lat = c(40.88504, 40.89998),
popup = c("Passaic Intake", "Pompton Intake"), label = c("Passaic Intake", "Pompton Intake")) %>%
fitBounds(lng1 = -74.3468, lat1 = 40.8979, lng2 = -74.269, lat2 = 40.81) %>%
addLayersControl(
baseGroups = c("ESRI (default)", "ESRI NatGeoWorldMap", "ESRI WorldImagery", "OpenStreetMap"),
overlayGroups = c("Dischargers (not sampled)", "Intakes"),
options = layersControlOptions(collapsed = F)
) %>%
hideGroup("Dischargers (not sampled)") %>%
hideGroup("Intakes") %>%
clearControls() %>%
clearControls() %>%
addCircleMarkers(
radius = 10, fillOpacity = 1, opacity = 1, stroke = TRUE, lng = initial_isco_sample_data$lng, lat = initial_isco_sample_data$lat,
popup = paste0(initial_isco_sample_data$Parameter, ": ", initial_isco_sample_data$Result), label = initial_isco_sample_data$`Station Name`,
color = "black", weight = 2, fillColor = initial_isco_sample_color_palette(initial_isco_sample_data$Result)
) %>%
addRectangles(
fillOpacity = 1, opacity = 1, stroke = TRUE, lng1 = initial_isco_sample_discharger_data$lon, lat1 = initial_isco_sample_discharger_data$lat, lng2 = initial_isco_sample_discharger_data$lon + .0025, lat2 = initial_isco_sample_discharger_data$lat - .0025,
popup = paste0(initial_isco_sample_discharger_data$Parameter, ": ", initial_isco_sample_discharger_data$Result),
label = initial_isco_sample_discharger_data$`Station Name`, color = "black", weight = 2,
fillColor = initial_isco_sample_discharger_color_palette(initial_isco_sample_discharger_data$Result), group = "rectangles"
) %>%
addLegend("bottomright",
pal = initial_isco_sample_color_palette, values = initial_isco_sample_data$Result,
title = str_c("Ambient ", initial_isco_sample_data$Parameter[1]), opacity = 1
) %>%
addLegend("bottomleft",
pal = initial_isco_sample_discharger_color_palette, values = initial_isco_sample_discharger_data$Result,
title = str_c("Discharger ", initial_isco_sample_data$Parameter[1]), opacity = 1
)
}
runApp()
source("~/passaic_nitrate_app/R/map_isco_sampling.R", echo=TRUE)
runApp()
event_details[[as.integer(input$sample_event)]]
source("~/passaic_nitrate_app/R/01_load_packages_and_data.R", echo=TRUE)
event_details[[as.integer(input$sample_event)]]
event_details
event_details <- readRDS('data/event_details.RDS')
event_details[[i]] <- event_details[[i]] <- mutate_if(is.numeric, as.integer)
for(i in 1:length(event_details)) {
event_details[[i]] <- event_details[[i]] <- mutate_if(is.numeric, as.integer)
}
event_details
event_details <- readRDS('data/event_details.RDS')
for(i in 1:length(event_details)) {
event_details[[i]] <- event_details[[i]] %>%  mutate_if(is.numeric, as.integer)
}
event_details
saveRDS(event_details, "data/event_details.RDS")
event_details <- readRDS('data/event_details.RDS')
event_details
runApp()
source("~/passaic_nitrate_app/R/01_load_packages_and_data.R", echo=TRUE)
source_all <- function(folder = 'R') {
files <- list.files(folder, full.names = TRUE)
purrr::walk(files, source)
}
source_all()
sample_data_summary()
runApp()
